// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: dps_server.proto

package dps_srv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DpsServiceClient is the client API for DpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpsServiceClient interface {
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error)
	CreateTopic(ctx context.Context, in *CreateTopicReq, opts ...grpc.CallOption) (*CommonRes, error)
	Dequeue(ctx context.Context, in *DequeueReq, opts ...grpc.CallOption) (*DequeueRes, error)
	Ack(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*CommonRes, error)
	NAck(ctx context.Context, in *NAckReq, opts ...grpc.CallOption) (*CommonRes, error)
}

type dpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpsServiceClient(cc grpc.ClientConnInterface) DpsServiceClient {
	return &dpsServiceClient{cc}
}

func (c *dpsServiceClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error) {
	out := new(PublishRes)
	err := c.cc.Invoke(ctx, "/dps_srv.DpsService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) CreateTopic(ctx context.Context, in *CreateTopicReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/dps_srv.DpsService/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) Dequeue(ctx context.Context, in *DequeueReq, opts ...grpc.CallOption) (*DequeueRes, error) {
	out := new(DequeueRes)
	err := c.cc.Invoke(ctx, "/dps_srv.DpsService/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) Ack(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/dps_srv.DpsService/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) NAck(ctx context.Context, in *NAckReq, opts ...grpc.CallOption) (*CommonRes, error) {
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, "/dps_srv.DpsService/NAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpsServiceServer is the grpcSrv API for DpsService service.
// All implementations must embed UnimplementedDpsServiceServer
// for forward compatibility
type DpsServiceServer interface {
	Publish(context.Context, *PublishReq) (*PublishRes, error)
	CreateTopic(context.Context, *CreateTopicReq) (*CommonRes, error)
	Dequeue(context.Context, *DequeueReq) (*DequeueRes, error)
	Ack(context.Context, *AckReq) (*CommonRes, error)
	NAck(context.Context, *NAckReq) (*CommonRes, error)
	mustEmbedUnimplementedDpsServiceServer()
}

// UnimplementedDpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDpsServiceServer struct {
}

func (UnimplementedDpsServiceServer) Publish(context.Context, *PublishReq) (*PublishRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedDpsServiceServer) CreateTopic(context.Context, *CreateTopicReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedDpsServiceServer) Dequeue(context.Context, *DequeueReq) (*DequeueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedDpsServiceServer) Ack(context.Context, *AckReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedDpsServiceServer) NAck(context.Context, *NAckReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NAck not implemented")
}
func (UnimplementedDpsServiceServer) mustEmbedUnimplementedDpsServiceServer() {}

// UnsafeDpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpsServiceServer will
// result in compilation errors.
type UnsafeDpsServiceServer interface {
	mustEmbedUnimplementedDpsServiceServer()
}

func RegisterDpsServiceServer(s grpc.ServiceRegistrar, srv DpsServiceServer) {
	s.RegisterService(&DpsService_ServiceDesc, srv)
}

func _DpsService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dps_srv.DpsService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dps_srv.DpsService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).CreateTopic(ctx, req.(*CreateTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dps_srv.DpsService/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).Dequeue(ctx, req.(*DequeueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dps_srv.DpsService/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).Ack(ctx, req.(*AckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_NAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NAckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).NAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dps_srv.DpsService/NAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).NAck(ctx, req.(*NAckReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DpsService_ServiceDesc is the grpc.ServiceDesc for DpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dps_srv.DpsService",
	HandlerType: (*DpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _DpsService_Publish_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _DpsService_CreateTopic_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _DpsService_Dequeue_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _DpsService_Ack_Handler,
		},
		{
			MethodName: "NAck",
			Handler:    _DpsService_NAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dps_server.proto",
}
